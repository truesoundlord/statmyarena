package MagicArena;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.Font;
import java.util.BitSet;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Dimitri "Hurukan" <soundlord@gmail.com>
 */
public class defMatch extends javax.swing.JPanel implements TableCellRenderer
{

	/**
	 * Creates new form defMatch
	 */
	public defMatch() 
	{
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 200, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 40, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

	@Override
	public Component getTableCellRendererComponent(JTable LaTable, Object source, boolean isSelected, boolean hasFocus, int ligne, int colonne) 
	{
		removeAll();
		
		if(colonne==ma_tablemodelmatch.COL) LaTable.getColumnModel().getColumn(colonne).setMinWidth(200);
		if(colonne==ma_tablemodelmatch.NAME) LaTable.getColumnModel().getColumn(colonne).setMinWidth(250);
		if(colonne==ma_tablemodelmatch.ENLVL || colonne==ma_tablemodelmatch.MYLVL) LaTable.getColumnModel().getColumn(colonne).setMinWidth(90);
		if(colonne==ma_tablemodelmatch.SCE || colonne==ma_tablemodelmatch.SCP) LaTable.getColumnModel().getColumn(colonne).setMaxWidth(60);
		
		setLayout(new FlowLayout(JLabel.CENTER));
		setBackground(new Color(31, 112, 121,255));
		
				
		switch(colonne)
		{
			case ma_tablemodelmatch.NAME:	add(new JLabel((String)source));
																		this.getComponent(this.getComponentCount()-1).setForeground(new Color(255, 227, 126, 255));
																		this.getComponent(this.getComponentCount()-1).setFont(new Font("Liberation Mono", Font.BOLD, 16));	
																		((FlowLayout)getLayout()).setVgap(baseline);
																		break;
			case ma_tablemodelmatch.COL:		BitSet valeur=(BitSet)((ma_Couleurs)source).DeckColors.clone();
																		add(new ma_Couleurs(valeur));
																		((FlowLayout)getLayout()).setAlignment(FlowLayout.CENTER);
																		break;
			case ma_tablemodelmatch.MYLVL:		int keyLevelP=Integer.valueOf((String)source);
																			add(new JLabel((String)classMatch.Levels.get(keyLevelP)));
																			this.getComponent(this.getComponentCount()-1).setForeground(new Color(0, 255, 255, 255));
																			this.getComponent(this.getComponentCount()-1).setFont(new Font("Liberation Mono", Font.BOLD, 12));	
																																						
																			((FlowLayout)getLayout()).setVgap(baseline);
																			((FlowLayout)getLayout()).setAlignment(FlowLayout.CENTER);	
																			break;
			case ma_tablemodelmatch.SCP:	add(new JLabel((String)source));
																		this.getComponent(this.getComponentCount()-1).setFont(new Font("Liberation Mono", Font.BOLD, 12));	
																		
																		this.getComponent(this.getComponentCount()-1).setForeground(new Color(121, 181, 181, 255));
																		if(Integer.parseInt((String)source)<=0 || Integer.parseInt((String)source)>20)
																		{
																			if(Integer.parseInt((String)source)<=0) this.getComponent(this.getComponentCount()-1).setForeground(new Color(255, 0, 0, 255));	
																			if(Integer.parseInt((String)source)>20) this.getComponent(this.getComponentCount()-1).setForeground(new Color(85, 85, 0, 255));	
																			setBackground(new Color(170, 170, 127, 255));
																		}
																		
																		((FlowLayout)getLayout()).setVgap(baseline);
																		((FlowLayout)getLayout()).setAlignment(FlowLayout.CENTER);
																		
																		break;
			case ma_tablemodelmatch.SCE:	add(new JLabel((String)source));
																		this.getComponent(this.getComponentCount()-1).setFont(new Font("Liberation Mono", Font.BOLD, 12));	
																		
																		this.getComponent(this.getComponentCount()-1).setForeground(new Color(121, 181, 181, 255));
																		if(Integer.parseInt((String)source)<=0 || Integer.parseInt((String)source)>20)
																		{
																			if(Integer.parseInt((String)source)<=0) this.getComponent(this.getComponentCount()-1).setForeground(new Color(255, 0, 0, 255));	
																			if(Integer.parseInt((String)source)>20) this.getComponent(this.getComponentCount()-1).setForeground(new Color(85, 85, 0, 255));	
																			setBackground(new Color(170, 170, 127, 255));
																		}
																		
																		((FlowLayout)getLayout()).setVgap(baseline);
																		((FlowLayout)getLayout()).setAlignment(FlowLayout.CENTER);
																		
																		break;
			case ma_tablemodelmatch.ENLVL: 	int keyLevelE=Integer.valueOf((String)source);
																			add(new JLabel((String)classMatch.Levels.get(keyLevelE)));
																			this.getComponent(this.getComponentCount()-1).setForeground(new Color(0, 255, 255, 255));
																			this.getComponent(this.getComponentCount()-1).setFont(new Font("Liberation Mono", Font.BOLD, 12));	
																			
																			
																			((FlowLayout)getLayout()).setVgap(baseline);
																			((FlowLayout)getLayout()).setAlignment(FlowLayout.CENTER);
																			
																			
																			
																			
																			break;
		}
		//LaTable.setToolTipText(FenetrePrincipale.ToolTipForStats);
		this.validate();
		return this;
	}
	
	public boolean isCellEditable(int rowIndex, int columnIndex) 
	{
		return false;
	}
	
	private int largeur;
	private final int baseline=12;

	
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}

